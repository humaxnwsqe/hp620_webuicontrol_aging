# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestManageECOMode():
  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_manageECOMode(self):
    # Test name: ManageECOMode
    # Step # | name | target | value
    # 1 | open | http://192.168.0.1 | 
    time.sleep(10)
    self.driver.get("http://192.168.0.1")
    # 2 | setWindowSize | 1243x969 | 
    time.sleep(10)
    self.driver.set_window_size(1243, 969)
    # 3 | type | name=input-password-field | 000000
    time.sleep(10)
    self.driver.find_element(By.NAME, "input-password-field").send_keys("000000")
    # 4 | sendKeys | name=input-password-field | ${KEY_ENTER}
    time.sleep(10)
    self.driver.find_element(By.NAME, "input-password-field").send_keys(Keys.ENTER)
    # 5 | pause | 5 | 
    time.sleep(10)
    # 6 | click | css=.header-status:nth-child(1) .menu-icon-header | 
    self.driver.find_element(By.CSS_SELECTOR, ".header-status:nth-child(1) .menu-icon-header").click()
    # 7 | click | css=.has-child-menu:nth-child(7) > .el-submenu__title | 
    time.sleep(10)
    self.driver.find_element(By.CSS_SELECTOR, ".has-child-menu:nth-child(7) > .el-submenu__title").click()
    # 8 | click | css=.is-opened .el-menu-item:nth-child(4) > span | 
    time.sleep(10)
    self.driver.find_element(By.CSS_SELECTOR, ".is-opened .el-menu-item:nth-child(4) > span").click()
    # 9 | click | css=.el-switch__core | 
    time.sleep(10)
    self.driver.find_element(By.CSS_SELECTOR, ".el-switch__core").click()
    # 10 | pause | 5 | 
    time.sleep(5)
    # 11 | click | css=.apply > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".apply > span").click()
    # 9 | click | css=.eco-dialog-select .el-input__inner | 
    time.sleep(10)
    self.driver.find_element(By.CSS_SELECTOR, ".eco-dialog-select .el-input__inner").click()
    # 10 | click | xpath=//span[contains(.,'Mode 2: LAN 4 Port 1Gbps & LED Eco Lighting')] | 
    time.sleep(10)
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Mode 2: LAN 4 Port 1Gbps & LED Eco Lighting\')]").click()
    # 11 | pause | 5 | 
    time.sleep(10)
    # 12 | click | css=.apply > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".apply > span").click()
    # 13 | click | css=.eco-dialog-select .el-input__inner | 
    time.sleep(10)
    self.driver.find_element(By.CSS_SELECTOR, ".eco-dialog-select .el-input__inner").click()
    # 14 | click | xpath=//span[contains(.,'Mode 3: LAN 4 Port 1Gbps at specific time')] | 
    time.sleep(10)
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Mode 3: LAN 4 Port 1Gbps at specific time\')]").click()
    # 15 | pause | 5 | 
    time.sleep(10)
    # 16 | click | css=.apply > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".apply > span").click()
    # 17 | click | css=.eco-dialog-select .el-input__inner | 
    time.sleep(10)
    self.driver.find_element(By.CSS_SELECTOR, ".eco-dialog-select .el-input__inner").click()
    # 18 | click | xpath=//span[contains(.,'Mode 1: LAN 4 Port 1Gbps (Speed limit)')] | 
    time.sleep(10)
    self.driver.find_element(By.XPATH, "//span[contains(.,\'Mode 1: LAN 4 Port 1Gbps (Speed limit)\')]").click()
    # 19 | pause | 5 | 
    time.sleep(10)
    # 20 | click | css=.apply > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".apply > span").click()
    # 21 | pause | 5 | 
    time.sleep(10)
    # 22 | click | css=.wrap-form-card .el-switch__core | 
    self.driver.find_element(By.CSS_SELECTOR, ".wrap-form-card .el-switch__core").click()
    # 23 | pause | 5 | 
    time.sleep(10)
    # 24 | click | css=.apply > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".apply > span").click()
    # 25 | pause | 5 | 
    time.sleep(10)
    """# 26 | click | css=.el-switch__core | 
    self.driver.find_element(By.CSS_SELECTOR, ".el-switch__core").click()
    # 27 | pause | 5 | 
    time.sleep(10)
    # 28 | click | css=.apply > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".apply > span").click()"""

