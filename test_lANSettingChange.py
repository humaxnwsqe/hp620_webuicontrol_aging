# Generated by Selenium IDE
import pytest
import time
import json
import sys
import os
import psutil
import logging
import multiprocessing as mp
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from subprocess import call
from os import system
from pynput import keyboard
import datetime


delayTime = 70 # Delay time before running kill all processes.
stop = False  # Flag to run stopping of all processes. 
maincount = 0 # Attribute to run required process once in function main()
#event = mp.Event()
loopCount = 0  # Attribute to run required process once in function event_controller()


logging.basicConfig(level=logging.DEBUG) # To print log in case of debugging.

"""A purpose to check all running python related processes and kill them all."""

def killprocess(pid, including_parent=True):
    parent = psutil.Process(pid)
    for child in parent.children(recursive=True):
        logging.debug("child: %s" %child)
        try:
          if(psutil.pid_exists(child.pid)):
            child.kill()
        except psutil.Error as e:
          logging.debug(e)

    if including_parent and psutil.pid_exists(parent.pid):
          logging.debug ("parent: %s" %parent)
          try:
            parent.kill()
          except psutil.Error as e:
            logging.debug(e)

"""def on_press(key):
    global stop
    print('Key %s pressed'% key)

    if key == keyboard.KeyCode.from_char('a') :
      print("Key 'q' has pressed!")
      stop = True
      print("on_press position stop: %s" %stop)"""

def on_release(key):
    global stop
    if key == keyboard.Key.esc:    
    #if key == keyboard.KeyCode.from_char('q') :
        print('\n Key %s has pressed.'%key)
        stop = True
        return False

#def event_Controller(event):
def event_Controller():
    global loopCount
    global delayTime

    pytestpid = 0

    while True:
          

      print("#####################################################################")
      print("###If you want to stop running pytest code(s), please press 'ESC' key.###")
      print("#####################################################################")
          
      time.sleep(1)

      """if loopCount == 0 and stop == False:
          #process = mp.Process(target=call, args=(["pytest"
          #,".\\test_lANSettingChange4.py"], ))
          #process.daemon = True
          process.start()
          pytestpid = process.pid          
          logging.debug("pytest pid is: %s"%pytestpid)
          logging.debug("pytest name is: %s"%process.name)"""
      if stop == False:
          #process = mp.Process(target=call, args=(["pytest"
          #,".\\test_lANSettingChange4.py"], ))
          process = mp.Process(target=call, args=(["pytest"
          ,".\\test_selectingAllMenu.py"
          ,".\\test_lANSettingChange.py"
          ,".\\test_serviceDMZ.py"
          ,".\\test_advancedNetwork.py"          
          ,".\\test_internetSettingChange.py"
          ,".\\test_manageECOMode.py"
          ,".\\test_primaryWireless.py"], ))
          #process.daemon = True
          process.start()
          pytestpid = process.pid          
          logging.debug("pytest pid is: %s"%pytestpid)
          logging.debug("pytest name is: %s"%process.name)
          process.join()
          
      
      if stop == True:
          pid = os.getpid()
          print("Please wait %d seconds while killing pytest and related processes!"%delayTime)
          for i in range(0, delayTime):
                if not i == delayTime-1:
                  print (".",end="")
                else:
                  print (".")      
                time.sleep(1)
          #time.sleep(delayTime)
          killprocess(pid)
          logging.debug("Break of while in event_Controller()!")
          break

      loopCount = loopCount + 1
    
    logging.debug("End of event_Controller!")


class TestLANSettingChange():  
  #import app  

  def setup_method(self, method):
    self.driver = webdriver.Firefox()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_lANSettingChange(self):
    # Test name: LANSettingChange
    # Step # | name | target | value
    # 1 | setSpeed | 2000000 | 
    #print("`set speed` is a no-op in code export, use `pause` instead")
    # 2 | open | http://192.168.0.1 | 
    self.driver.get("http://192.168.0.1")
    # 3 | setWindowSize | 995x799 | 
    self.driver.set_window_size(1243, 969)
    # 4 | click | name=input-password-field | 
    #self.driver.find_element(By.NAME, "input-password-field").click()
    # 5 | type | name=input-password-field | 000000
    self.driver.find_element(By.NAME, "input-password-field").send_keys("000000")
    # 6 | sendKeys | name=input-password-field | ${KEY_ENTER}
    self.driver.find_element(By.NAME, "input-password-field").send_keys(Keys.ENTER)
    # 7 | click | css=.header-status:nth-child(1) .menu-icon-header | 
    time.sleep(5)
    self.driver.find_element(By.CSS_SELECTOR, ".header-status:nth-child(1) .menu-icon-header").click()
    # 8 | click | css=.has-child-menu:nth-child(4) > .el-submenu__title > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".has-child-menu:nth-child(4) > .el-submenu__title > span").click()
    # 9 | click | css=.is-opened .el-menu-item:nth-child(1) > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".is-opened .el-menu-item:nth-child(1) > span").click()
    # 10 | times | 2 |     
          
    """while True:"""
    #for i in range(0, 10):
      
    time.sleep(5)
    # 12 | type | css=.wrap-form-card:nth-child(5) .el-input__inner:nth-child(1) | 100
    #self.driver.find_element(By.CSS_SELECTOR, ".wrap-form-card:nth-child(5) .el-input__inner:nth-child(1)").send_keys("100")
    self.driver.find_element(By.NAME, "input-field-input-validator").clear()
    self.driver.find_element(By.NAME, "input-field-input-validator").send_keys("100")

    time.sleep(5)
    #self.driver.find_element(By.CSS_SELECTOR, ".el-input-group > .el-input__inner").click()
    # 14 | type | css=.el-input-group > .el-input__inner | 10
    self.driver.find_element(By.CSS_SELECTOR, ".el-input-group > .el-input__inner").clear()
    self.driver.find_element(By.CSS_SELECTOR, ".el-input-group > .el-input__inner").send_keys("10")
    #self.driver.find_element(By.XPATH, "(//input[@name=\'input-field-input-validator\'])[2]").clear() 
    #self.driver.find_element(By.XPATH, "(//input[@name=\'input-field-input-validator\'])[2]").send_keys("10")
    time.sleep(5)
    # 16 | click | css=.apply > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".apply > span").click()


    # 18 | type | css=.wrap-form-card:nth-child(5) .el-input__inner:nth-child(1) | 200
    time.sleep(5)
    self.driver.find_element(By.NAME, "input-field-input-validator").clear()
    self.driver.find_element(By.NAME, "input-field-input-validator").send_keys("200")

    # 20 | type | css=.el-input-group > .el-input__inner | 20
    self.driver.find_element(By.CSS_SELECTOR, ".el-input-group > .el-input__inner").clear()
    self.driver.find_element(By.CSS_SELECTOR, ".el-input-group > .el-input__inner").send_keys("20")
    #self.driver.find_element(By.XPATH, "(//input[@name=\'input-field-input-validator\'])[2]").clear() 
    #self.driver.find_element(By.XPATH, "(//input[@name=\'input-field-input-validator\'])[2]").send_keys("20")
    time.sleep(5)
    # 21 | click | css=.apply > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".apply > span").click()
    # 22 | end |  | 

def main():
  global stop
  global maincount

  while True:
    if maincount < 1:
      """To catch key press(release) during running all processes at any time"""
      listener = keyboard.Listener(on_release=on_release)
      listener.start()

    if stop == False:  

        """if event.is_set() == True:
            event = mp.Event()"""

        if maincount < 1: 
          p_ps = mp.Process(target=event_Controller)
          #process.daemon = True      
          p_ps.start()
          logging.debug("pid of parent process 'event_Contorller()' is %s."%p_ps.pid)

    
    maincount = maincount + 1

    if maincount == 10:
        time.sleep(3)
        maincount = 1    

    if stop == True: 
        """print("pytest pid is: %s"%p_ps.pid)"""       
        """event.set()"""

        """Calling event_Controller function to kill running all processes"""
        event_Controller()
        logging.debug("Break of while in main()!")
        break

if __name__ == '__main__':
  """In case of Windows environment, freeze_support() should be declared at the first line of __main__"""
  mp.freeze_support()
  print("#####################################################################")
  print("###Start to run pytest code!                                      ###")
  print("###If you want to stop running pytest code(s), please press 'ESC' key.###")
  print("#####################################################################")
  main()
  
  